{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","props","contacts","onChange","value","map","contact","name","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","onSubmit","type","target","placeholder","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","array","Object","values","className","data","index","TileList","objArr","AppointmentsPage","appointments","addAppointment","useState","e","preventDefault","ContactForm","setName","phone","setPhone","email","setEmail","required","pattern","ContactsPage","addContact","duplicate","setDuplicate","useEffect","App","setContacts","setAppointments","ROUTES","to","activeClassName","exact","path","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7c8630b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = (props) => {\r\n  const contacts = props.contacts;\r\n  const onChange = props.onChange;\r\n\r\n  return (\r\n    <select onChange={onChange}>\r\n      <option value=\"\">Select A Contact</option>\r\n      {contacts.map( contact => <option value={contact.name}>{contact.name}</option>)}\r\n    </select>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker } from \"../contactPicker/ContactPicker\";\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit\r\n}) => {\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input \r\n        type=\"text\"\r\n        value={title}\r\n        onChange={({target}) => {setTitle(target.value)}}\r\n        placeholder=\"Appointment Name\"\r\n       />\r\n      <input \r\n        type=\"date\"\r\n        value={date}\r\n        min={getTodayString()}\r\n        onChange={({target}) => {setDate(target.value)}}\r\n       />\r\n      <input \r\n        type=\"time\"\r\n        value={time}\r\n        onChange={({target}) => {setTime(target.value)}}\r\n       />\r\n      <ContactPicker \r\n        contacts={contacts}\r\n        value={contact}\r\n        onChange={({target}) => setContact(target.value)}\r\n       />\r\n      <input \r\n        type=\"submit\"\r\n       />\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = ({value}) => {\r\n  const array = Object.values(value);\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {array.map( (data, index) => {\r\n        if (index === 0) {\r\n          return <p className=\"tile-title\" key={index}>{data}</p>;\r\n        }\r\n        return <p className=\"tile\" key={index}>{data}</p>;\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from \"../tile/Tile\";\r\n\r\nexport const TileList = ({objArr}) => {\r\n  return (\r\n    <div>\r\n      {objArr.map( (value, index) => <Tile value={value} key={index} />)}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { AppointmentForm } from \"../../components/appointmentForm/AppointmentForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const AppointmentsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n  const appointments = props.appointments;\r\n  const contacts = props.contacts;\r\n  const addAppointment = props.addAppointment;\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [contact, setContact] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [time, setTime] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data  \r\n    */\r\n    addAppointment(title, contact, date, time);\r\n    setTitle('');\r\n    setContact('');\r\n    setDate('');\r\n    setTime('');\r\n   \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm\r\n          title={title}\r\n          contacts={contacts}\r\n          date={date}\r\n          time={time}\r\n          setTitle={setTitle}\r\n          setContact={setContact}\r\n          setDate={setDate}\r\n          setTime={setTime}\r\n          handleSubmit={handleSubmit}\r\n         />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList\r\n        objArr={appointments} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={({target}) => {setName(target.value)}}\r\n        placeholder=\"Name\"\r\n        required\r\n       />\r\n      <input\r\n        type=\"tel\"\r\n        value={phone}\r\n        pattern=\"[1-9][0-9]{2}-[1-9][0-9]{2}-[0-9]{4}\"\r\n        onChange={({target}) => {setPhone(target.value)}}\r\n        placeholder=\"Phone Number\"\r\n        required\r\n       />\r\n      <input\r\n        type=\"email\"\r\n        value={email}\r\n        onChange={({target}) => {setEmail(target.value)}}\r\n        placeholder=\"Email Address\"\r\n        required\r\n       />\r\n      <input\r\n        type=\"submit\"\r\n       />\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const contacts = props.contacts;\r\n  const addContact = props.addContact;\r\n\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!duplicate) {\r\n      addContact(name, phone, email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  useEffect( () => {\r\n    for (const contact of contacts) {\r\n      if (name === contact.name) {\r\n        setDuplicate(true);\r\n      }\r\n\r\n      return;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          name={name}\r\n          phone={phone}\r\n          email={email}\r\n          setName={setName}\r\n          setPhone={setPhone}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n         /> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          objArr={props.contacts}\r\n         />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n  const [contacts, setContacts] =  useState([]);\r\n  const [appointments, setAppointments] = useState([]);\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n \r\n\r\n  /* Define a callback function that, \r\n  given a name, phone number, and email, \r\n  adds a new contact object with that data \r\n  to the array of contacts*/\r\n  const addContact = (name, phone, email ) => {\r\n    setContacts( prev => [...prev, {name, phone, email}]);\r\n  };\r\n\r\n\r\n  /*Define a callback function that, given a title, \r\n  contact, date, and time, adds a new appointment object \r\n  with that data to the array of appointments */\r\n  const addAppointment = (title, contact, date, time) => {\r\n    setAppointments( prev => [...prev, {title, contact, date, time}]);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n             {/* Add props to ContactsPage */}\r\n            <ContactsPage\r\n              addContact={addContact}\r\n              contacts={contacts}\r\n             />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage\r\n              addAppointment={addAppointment}\r\n              appointments={appointments}\r\n              contacts={contacts}\r\n             />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}